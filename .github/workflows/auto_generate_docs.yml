name: 📚 Gerar Documentação Automaticamente

on:
  push:
    branches: [main, master]
  workflow_dispatch:

# Adiciona permissões necessárias
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  doc-update:
    name: Atualizar documentação automaticamente
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🛠️ Instalar dependências necessárias
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🔍 Verificar se já existe um PR aberto
        id: check_pr
        run: |
          pr_info=$(gh pr list --state open --search "Atualização automática da documentação in:title" --json number,headRefName --jq '.[0]')
          
          if [ "$pr_info" != "null" ] && [ -n "$pr_info" ]; then
            pr_number=$(echo "$pr_info" | jq -r '.number')
            branch_name=$(echo "$pr_info" | jq -r '.headRefName')
            echo "PR existente encontrado: #$pr_number na branch: $branch_name"
            echo "existing_pr=$pr_number" >> $GITHUB_OUTPUT
            echo "existing_branch=$branch_name" >> $GITHUB_OUTPUT
            echo "has_existing_pr=true" >> $GITHUB_OUTPUT
          else
            echo "Nenhum PR existente encontrado"
            echo "existing_pr=" >> $GITHUB_OUTPUT
            echo "existing_branch=" >> $GITHUB_OUTPUT
            echo "has_existing_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🪄 Usar branch existente ou criar nova
        run: |
          if [ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]; then
            # Usar branch existente
            branch_name="${{ steps.check_pr.outputs.existing_branch }}"
            echo "🔄 Usando branch existente: $branch_name"
            git fetch origin $branch_name
            git checkout $branch_name
          else
            # Criar nova branch
            timestamp=$(date +%Y%m%d_%H%M%S)
            branch_name="docs/auto-update-$timestamp"
            echo "🪄 Criando nova branch: $branch_name"
            git checkout -b $branch_name
          fi
          echo "branch_name=$branch_name" >> $GITHUB_ENV

      - name: 📦 Executar Agentes de Documentação
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          cd readocs
          python main.py

      - name: 🔧 Substituir {{BADGE_SECTION}} pelo HTML de badges
        run: |
          BADGE_HTML='<div align="center">

          <img src="https://img.shields.io/github/repo-size/usuario/repositorio?style=for-the-badge">
          <img src="https://img.shields.io/github/languages/count/usuario/repositorio?style=for-the-badge">
          <img src="https://img.shields.io/github/forks/usuario/repositorio?style=for-the-badge">
          <img src="https://img.shields.io/bitbucket/issues/usuario/repositorio?style=for-the-badge">
          <img src="https://img.shields.io/bitbucket/pr-raw/usuario/repositorio?style=for-the-badge">
          <br><br>
          <img src="https://via.placeholder.com/480x320.png?text=Imagem+do+Projeto" height="320">
          </div>'

          awk -v replacement="$BADGE_HTML" '
            {
              gsub(/\{\{BADGE_SECTION\}\}/, replacement)
              print
            }
          ' README.md > README.tmp && mv README.tmp README.md

      - name: 🔍 Verificar mudanças
        id: check_changes
        run: |
          git add README.md CHANGELOG.md || true
          if git diff --cached --quiet; then
            echo "📝 Nenhuma mudança detectada na documentação"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📝 Mudanças detectadas na documentação"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git status
          fi

      - name: ✅ Commit e push mudanças
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          commit_msg="docs: atualização automática da documentação [skip ci]"
          if [ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]; then
            commit_msg="docs: atualização da documentação (PR #${{ steps.check_pr.outputs.existing_pr }}) [skip ci]"
          fi
          
          git commit -m "$commit_msg"
          git push origin HEAD
          
          echo "✅ Push realizado para branch: ${{ env.branch_name }}"

      - name: 📤 Criar Pull Request para main (se novo)
        if: steps.check_changes.outputs.has_changes == 'true' && steps.check_pr.outputs.has_existing_pr == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_body="## 📚 Atualização Automática da Documentação

          Esta é uma atualização automática da documentação gerada pelos agentes IA.

          ### 🤖 Mudanças Realizadas:
          - ✅ README.md atualizado com análise do projeto
          - ✅ CHANGELOG.md atualizado com nova versão
          
          ### 📋 Detalhes:
          - **Trigger**: ${{ github.event_name }}
          - **Branch de origem**: ${{ env.branch_name }}
          - **Branch de destino**: main
          - **Commit**: ${{ github.sha }}
          - **Autor**: ${{ github.actor }}
          
          ### ⚠️ Revisão Necessária
          Por favor, revise as mudanças antes de fazer o merge para a main.
          
          ---
          🤖 *Gerado automaticamente pelo GitHub Actions*"

          pr_url=$(gh pr create \
            --title "📚 Atualização automática da documentação" \
            --body "$pr_body" \
            --base main \
            --head ${{ env.branch_name }} \
            --label "documentation")

          echo "✅ Novo PR criado para merge na main!"
          echo "🔗 Verifique em: $pr_url"

      - name: 🔄 Atualizar PR existente
        if: steps.check_changes.outputs.has_changes == 'true' && steps.check_pr.outputs.has_existing_pr == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 PR #${{ steps.check_pr.outputs.existing_pr }} foi atualizado com novas mudanças"
          
          # Adiciona comentário no PR sobre a atualização
          gh pr comment ${{ steps.check_pr.outputs.existing_pr }} --body "🤖 **Documentação atualizada automaticamente**

          Nova atualização baseada no commit: \`${{ github.sha }}\`
          
          📅 Atualizado em: $(date)
          👤 Autor do commit: ${{ github.actor }}
          🎯 **Pronto para revisão e merge na main**"
          
          echo "✅ PR atualizado com sucesso!"
          echo "🔗 Verifique em: https://github.com/${{ github.repository }}/pull/${{ steps.check_pr.outputs.existing_pr }}"

      - name: 📊 Resumo da execução
        run: |
          echo "## 📊 Resumo da Execução"
          echo "- Branch de trabalho: ${{ env.branch_name }}"
          echo "- Branch de destino: main"
          if [ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]; then
            echo "- Ação: Atualização do PR #${{ steps.check_pr.outputs.existing_pr }} para merge na main"
          else
            echo "- Ação: Criação de novo PR para merge na main"
          fi
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "- Mudanças: ✅ Documentação atualizada e aguardando revisão"
          else
            echo "- Mudanças: 📝 Nenhuma mudança detectada"
          fi