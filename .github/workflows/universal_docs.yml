name: 📚 Documentação Universal com Readocs

on:
  push:
    branches: [main, master]
  workflow_dispatch:

# Adiciona permissões necessárias
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  doc-update:
    name: Atualizar documentação automaticamente
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🛠️ Instalar Readocs Universal
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          
          # Instalar Readocs diretamente do repositório
          pip install git+https://github.com/${{ github.repository_owner }}/Readocs.git
          
          # Dependências essenciais do Readocs
          pip install anthropic google-generativeai agno typer rich pathlib

      - name: 🔍 Verificar se já existe um PR aberto
        id: check_pr
        run: |
          pr_info=$(gh pr list --state open --search "📚 Documentação automática" --json number,headRefName --jq '.[0]')
          
          if [ "$pr_info" != "null" ] && [ -n "$pr_info" ]; then
            pr_number=$(echo "$pr_info" | jq -r '.number')
            branch_name=$(echo "$pr_info" | jq -r '.headRefName')
            echo "PR existente encontrado: #$pr_number na branch: $branch_name"
            echo "existing_pr=$pr_number" >> $GITHUB_OUTPUT
            echo "existing_branch=$branch_name" >> $GITHUB_OUTPUT
            echo "has_existing_pr=true" >> $GITHUB_OUTPUT
          else
            echo "Nenhum PR existente encontrado"
            echo "existing_pr=" >> $GITHUB_OUTPUT
            echo "existing_branch=" >> $GITHUB_OUTPUT
            echo "has_existing_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🪄 Usar branch existente ou criar nova
        run: |
          if [ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]; then
            # Usar branch existente
            branch_name="${{ steps.check_pr.outputs.existing_branch }}"
            echo "🔄 Usando branch existente: $branch_name"
            git fetch origin $branch_name
            git checkout $branch_name
          else
            # Criar nova branch
            timestamp=$(date +%Y%m%d_%H%M%S)
            branch_name="docs/readocs-auto-$timestamp"
            echo "🪄 Criando nova branch: $branch_name"
            git checkout -b $branch_name
          fi
          echo "branch_name=$branch_name" >> $GITHUB_ENV

      - name: 📦 Executar Readocs Universal
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          READOCS_MODEL_ID: ${{ secrets.READOCS_MODEL_ID || 'claude-3-haiku-20240307' }}
        run: |
          echo "🚀 Executando Readocs Universal no projeto atual..."
          echo "📁 Diretório: $(pwd)"
          echo "📂 Arquivos no diretório:"
          ls -la
          
          # Executar Readocs Universal
          python -m readocs generate . || {
            echo "⚠️ Erro ao executar Readocs. Tentando modo dry-run..."
            python -m readocs generate . --dry-run
          }

      - name: 🔧 Configurar badges dinâmicos
        run: |
          REPO_FULL="${{ github.repository }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)
          
          BADGE_HTML="<div align=\"center\">

          <img src=\"https://img.shields.io/github/repo-size/$REPO_FULL?style=for-the-badge\">
          <img src=\"https://img.shields.io/github/languages/count/$REPO_FULL?style=for-the-badge\">
          <img src=\"https://img.shields.io/github/forks/$REPO_FULL?style=for-the-badge\">
          <img src=\"https://img.shields.io/github/issues/$REPO_FULL?style=for-the-badge\">
          <img src=\"https://img.shields.io/github/issues-pr/$REPO_FULL?style=for-the-badge\">
          <br><br>
          </div>"

          # Substituir {{BADGE_SECTION}} se existir
          if [ -f README.md ]; then
            awk -v replacement="$BADGE_HTML" '
              {
                gsub(/\{\{BADGE_SECTION\}\}/, replacement)
                print
              }
            ' README.md > README.tmp && mv README.tmp README.md
          fi

      - name: 🔍 Verificar mudanças
        id: check_changes
        run: |
          git add README.md CHANGELOG.md || true
          if git diff --cached --quiet; then
            echo "📝 Nenhuma mudança detectada na documentação"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📝 Mudanças detectadas na documentação"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📋 Arquivos modificados:"
            git status --porcelain
          fi

      - name: ✅ Commit e push mudanças
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          commit_msg="📚 docs: atualização automática com Readocs Universal [skip ci]"
          if [ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]; then
            commit_msg="📚 docs: atualização da documentação (PR #${{ steps.check_pr.outputs.existing_pr }}) [skip ci]"
          fi
          
          git commit -m "$commit_msg"
          git push origin HEAD
          
          echo "✅ Push realizado para branch: ${{ env.branch_name }}"

      - name: 📤 Criar Pull Request (se novo)
        if: steps.check_changes.outputs.has_changes == 'true' && steps.check_pr.outputs.has_existing_pr == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Detectar tipo de projeto
          PROJECT_TYPES=""
          [ -f "package.json" ] && PROJECT_TYPES="$PROJECT_TYPES Node.js"
          [ -f "requirements.txt" ] && PROJECT_TYPES="$PROJECT_TYPES Python"
          [ -f "pom.xml" ] && PROJECT_TYPES="$PROJECT_TYPES Java"
          [ -f "go.mod" ] && PROJECT_TYPES="$PROJECT_TYPES Go"
          [ -f "Cargo.toml" ] && PROJECT_TYPES="$PROJECT_TYPES Rust"
          [ -z "$PROJECT_TYPES" ] && PROJECT_TYPES=" Genérico"

          pr_body="## 📚 Documentação Automática com Readocs Universal

          Esta é uma atualização automática da documentação gerada pelo **Readocs Universal**.

          ### 🤖 Mudanças Realizadas:
          - ✅ README.md atualizado com análise inteligente do projeto
          - ✅ CHANGELOG.md atualizado com nova versão
          - 🎯 Documentação adaptada para projeto:$PROJECT_TYPES
          
          ### 📋 Detalhes Técnicos:
          - **Repositório**: ${{ github.repository }}
          - **Trigger**: ${{ github.event_name }}
          - **Branch origem**: ${{ env.branch_name }}
          - **Branch destino**: ${{ github.ref_name }}
          - **Commit**: \`${{ github.sha }}\`
          - **Autor**: ${{ github.actor }}
          
          ### 🔍 Como Foi Gerado:
          1. 🚀 Readocs Universal analisou automaticamente o projeto
          2. 🧠 IA (Claude/Gemini) gerou documentação personalizada
          3. 📝 Arquivos README.md e CHANGELOG.md foram atualizados
          4. 🔄 PR criado automaticamente para revisão
          
          ### ⚠️ Revisão Necessária
          Por favor, revise as mudanças antes de fazer o merge.
          
          ---
          🤖 *Gerado automaticamente pelo **Readocs Universal** via GitHub Actions*
          🔗 [Saiba mais sobre o Readocs](https://github.com/${{ github.repository_owner }}/Readocs)"

          pr_url=$(gh pr create \
            --title "📚 Documentação automática com Readocs Universal" \
            --body "$pr_body" \
            --base ${{ github.ref_name }} \
            --head ${{ env.branch_name }} \
            --label "documentation,readocs,automated")

          echo "✅ Novo PR criado!"
          echo "🔗 Acesse: $pr_url"

      - name: 🔄 Atualizar PR existente
        if: steps.check_changes.outputs.has_changes == 'true' && steps.check_pr.outputs.has_existing_pr == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 PR #${{ steps.check_pr.outputs.existing_pr }} foi atualizado"
          
          # Adiciona comentário no PR sobre a atualização
          gh pr comment ${{ steps.check_pr.outputs.existing_pr }} --body "🤖 **Readocs Universal - Nova Atualização**

          📝 Documentação atualizada automaticamente
          
          **Detalhes da Atualização:**
          - 📅 **Quando**: $(date)
          - 💻 **Commit**: \`${{ github.sha }}\`
          - 👤 **Autor**: ${{ github.actor }}
          - 🎯 **Status**: ✅ Pronto para revisão
          
          ---
          🤖 *Processado pelo Readocs Universal*"
          
          echo "✅ PR atualizado com sucesso!"

      - name: 📊 Resumo da execução
        run: |
          echo "## 📊 Readocs Universal - Resumo da Execução"
          echo ""
          echo "### 🎯 Projeto Analisado:"
          echo "- **Repositório**: ${{ github.repository }}"
          echo "- **Branch**: ${{ github.ref_name }}"
          echo "- **Diretório**: $(pwd)"
          echo ""
          echo "### 🔄 Ações Realizadas:"
          echo "- **Branch de trabalho**: ${{ env.branch_name }}"
          if [ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]; then
            echo "- **Ação**: Atualização do PR #${{ steps.check_pr.outputs.existing_pr }}"
          else
            echo "- **Ação**: Criação de novo PR"
          fi
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "- **Resultado**: ✅ Documentação atualizada e aguardando revisão"
          else
            echo "- **Resultado**: 📝 Nenhuma mudança detectada"
          fi
          echo ""
          echo "🚀 **Readocs Universal funcionou perfeitamente!**"
