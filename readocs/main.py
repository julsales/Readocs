from agents.doc_agent import doc_agent
from agents.curation_agent import curation_agent
from agno.team import Team
from agno.models.anthropic import Claude
from datetime import datetime
import re
import os
from pathlib import Path
from dotenv import load_dotenv

# ========== CONFIGURA√á√ÉO ==========
PROJECT_FOLDER = "readocs"
ROOT_DIR = ".."
# ==================================

def setup_directories():
    current = Path.cwd()
    
    if (current / PROJECT_FOLDER).exists():
        target_root = current
        project_path = f"./{PROJECT_FOLDER}"
    elif current.name == PROJECT_FOLDER:
        target_root = current.parent
        project_path = f"./{PROJECT_FOLDER}"
        os.chdir(target_root)
    else:
        target_root = Path(ROOT_DIR).resolve()
        project_path = f"./{PROJECT_FOLDER}"
        os.chdir(target_root)
    
    print(f"üìÅ Diret√≥rio raiz (arquivos): {os.getcwd()}")
    print(f"üîç C√≥digo para an√°lise: {project_path}")
    
    return project_path

def get_next_version():
    changelog_path = "CHANGELOG.md"
    
    if not os.path.exists(changelog_path):
        return "0.1.0"
    
    try:
        with open(changelog_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        version_pattern = r'## \[(\d+)\.(\d+)\.(\d+)\]'
        versions = re.findall(version_pattern, content)
        
        if not versions:
            return "0.1.0"
        
        major, minor, patch = map(int, versions[0])
        return f"{major}.{minor}.{patch + 1}"
    
    except Exception as e:
        print(f"Erro ao ler CHANGELOG: {e}")
        return "0.1.0"

# ‚ö†Ô∏è Aqui est√£o suas fun√ß√µes utilit√°rias
def read_file(path: str) -> str:
    if not os.path.exists(path):
        return f"‚ö†Ô∏è Arquivo '{path}' n√£o encontrado."

    try:
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    except UnicodeDecodeError:
        with open(path, "r", encoding="latin-1", errors="replace") as f:
            return f.read()
    except Exception as e:
        return f"Erro ao ler '{path}': {e}"

def list_files(directory: str) -> str:
    try:
        items = os.listdir(directory)
        return "\n".join(items)
    except Exception as e:
        return f"Erro ao listar arquivos: {e}"

def main():
    project_path = setup_directories()
    load_dotenv()

    if "ANTHROPIC_API_KEY" not in os.environ:
        print("‚ö†Ô∏è  Defina a vari√°vel ANTHROPIC_API_KEY no .env.")
        return

    next_version = get_next_version()
    current_date = datetime.now().strftime("%Y-%m-%d")
    project_name = os.path.basename(os.getcwd())

    # ‚úÖ Executando manualmente (sem usar ferramentas)
    files_list = list_files(project_path)
    main_py = read_file(os.path.join(project_path, "main.py"))
    reqs_txt = read_file(os.path.join(project_path, "requirements.txt"))

    team = Team(
        mode="coordinate",
        members=[curation_agent, doc_agent],
        model=Claude(
            id="claude-3-haiku-20240307",
            api_key=os.getenv("ANTHROPIC_API_KEY")
        ),
        success_criteria="Atualizar automaticamente a documenta√ß√£o t√©cnica com curadoria humana.",
        instructions=[
            "Documenta√ß√£o deve ser clara, concisa e em markdown.",
            "Instru√ß√µes de instala√ß√£o devem ser precisas.",
            "Evitar sobrescrever conte√∫do √∫til.",
            "Se√ß√µes n√£o devem ser duplicadas, caso estejam, o conte√∫do deve ser unificado e s√≥ uma se√ß√£o deve permanecer.",
            "Evitar repetir informa√ß√µes j√° documentadas.",
            "README.md: vis√£o geral; CHANGELOG.md: mudan√ßas.",
            "Mantenha imagens se existirem."
        ],
        markdown=True,
        # üî• N√£o adicionamos `tools=[]`, nem registramos fun√ß√µes
    )

    team.print_response(f"""
    Voc√™ √© um agente que deve analisar completamente o projeto para gerar a documenta√ß√£o.
    A documenta√ß√£o deve ser toda em portugu√™s e seguir as diretrizes do projeto.
    Para o README.md, voc√™ deve:
    1. Comece com o t√≠tulo sendo o nome do projeto que √© '{project_name}'. Apenas a primeira letra do nome do projeto deve ser mai√∫scula.
    2. Use a ferramenta 'list_files' para ter uma vis√£o geral da estrutura do projeto em '{project_path}'.
    3. Com base na lista de arquivos, use a ferramenta 'read_file' para analisar os arquivos relevantes, como 'main.py' e 'requirements.txt', para entender o prop√≥sito e as depend√™ncias do projeto.
    4. Atualize o README.md com uma se√ß√£o de 'Introdu√ß√£o' (baseada na sua an√°lise) e uma se√ß√£o de 'Instala√ß√£o' (com as depend√™ncias e instru√ß√µes para instalar o projeto que voc√™ encontrou).
    5. Se identificar uma VENV ou ambiente virtual, adicione instru√ß√µes para ativ√°-lo em sistemas operacionais Windows e Linux.
    6. Crie uma se√ß√£o de Funcionalidades que descreva o que o projeto faz, baseado na an√°lise dos arquivos.
    Diretrizes para o CHANGELOG.md:
    1. Adicione uma nova entrada para a vers√£o {next_version}.
    2. O novo registro deve incluir a data de hoje ({current_date}).
    3. A entrada deve ser: "- (Adicionado) Inicializa√ß√£o do sistema de documenta√ß√£o com agentes."
    """)

    print(f"\n‚úÖ Documenta√ß√£o gerada.")
    print(f"üìÑ Arquivos README.md e CHANGELOG.md atualizados no diret√≥rio atual.")

if __name__ == "__main__":
    main()