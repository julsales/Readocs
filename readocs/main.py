from agents.doc_agent import doc_agent
from agents.curation_agent import curation_agent
from agno.team import Team
from agno.models.anthropic import Claude
from datetime import datetime
import re
import os
from pathlib import Path
import sys

from dotenv import load_dotenv

# ========== CONFIGURA√á√ÉO DO PROJETO ==========
# Ajuste estes caminhos conforme seu projeto:

PROJECT_FOLDER = "readocs"  # Nome da pasta com o c√≥digo
ROOT_DIR = ".."             # Onde criar README/CHANGELOG (.. = pasta pai)

# Para outros projetos, mude apenas essas vari√°veis:
# PROJECT_FOLDER = "src"     # ou "app", "backend", etc.
# ROOT_DIR = "."             # ou "../..", etc.

# =============================================

def print_header():
    """Exibe cabe√ßalho bonito do programa"""
    print("=" * 60)
    print("üöÄ  READOCS - DOCUMENTA√á√ÉO AUTOM√ÅTICA COM IA  üöÄ")
    print("=" * 60)
    print("üìù Sistema inteligente de gera√ß√£o de documenta√ß√£o")
    print("ü§ñ Powered by Anthropic Claude AI")
    print("=" * 60)
    print()

def print_step(step, total, message, status="üîÑ"):
    """Exibe progresso de forma bonita"""
    progress = int((step / total) * 40)
    bar = "‚ñà" * progress + "‚ñë" * (40 - progress)
    percentage = int((step / total) * 100)
    print(f"{status} [{bar}] {percentage:3d}% | {message}")

def print_success(message):
    """Exibe mensagem de sucesso"""
    print(f"\n‚úÖ {message}")

def print_error(message):
    """Exibe mensagem de erro"""
    print(f"\n‚ùå {message}")

def print_info(message):
    """Exibe informa√ß√£o"""
    print(f"‚ÑπÔ∏è  {message}")

def setup_directories():
    """Configura diret√≥rios de forma inteligente"""
    current = Path.cwd()
    
    print_step(1, 8, "Configurando diret√≥rios do projeto...")
    
    # Se j√° estamos no diret√≥rio que tem o PROJECT_FOLDER, vai para o pai
    if (current / PROJECT_FOLDER).exists():
        target_root = current
        project_path = f"./{PROJECT_FOLDER}"
    
    # Se estamos dentro do PROJECT_FOLDER, sobe um n√≠vel  
    elif current.name == PROJECT_FOLDER:
        target_root = current.parent
        project_path = f"./{PROJECT_FOLDER}"
        os.chdir(target_root)
    
    # Caso geral: usa ROOT_DIR configurado
    else:
        target_root = Path(ROOT_DIR).resolve()
        project_path = f"./{PROJECT_FOLDER}"
        os.chdir(target_root)
    
    print(f"üìÅ Diret√≥rio raiz: {os.getcwd()}")
    print(f"üîç C√≥digo analisado: {project_path}")
    print()
    
    return project_path

def get_next_version():
    """Determina a pr√≥xima vers√£o baseada no CHANGELOG existente"""
    changelog_path = "CHANGELOG.md"
    
    print_step(2, 8, "Analisando vers√µes existentes...")
    
    if not os.path.exists(changelog_path):
        print_info("CHANGELOG.md n√£o encontrado, iniciando vers√£o 0.0.1")
        return "0.0.1"
    
    try:
        with open(changelog_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Padr√£o para capturar vers√µes no formato [0.0.1] - YYYY-MM-DD
        version_pattern = r'## \[(\d+)\.(\d+)\.(\d+)\] - \d{4}-\d{2}-\d{2}'
        versions = re.findall(version_pattern, content)
        
        if not versions:
            print_info("Nenhuma vers√£o encontrada no CHANGELOG, iniciando vers√£o 0.0.1")
            return "0.0.1"
        
        # Pega a vers√£o mais alta encontrada
        max_version = (0, 0, 0)
        for version in versions:
            major, minor, patch = map(int, version)
            if (major, minor, patch) > max_version:
                max_version = (major, minor, patch)
        
        major, minor, patch = max_version
        
        # Incrementa patch por padr√£o
        new_version = f"{major}.{minor}.{patch + 1}"
        print_info(f"√öltima vers√£o: {major}.{minor}.{patch} ‚Üí Nova: {new_version}")
        
        return new_version
    
    except Exception as e:
        print_error(f"Erro ao ler CHANGELOG: {e}")
        return "0.0.1"

def check_readme_sections():
    """Verifica se README tem se√ß√µes duplicadas"""
    readme_path = "README.md"
    
    if not os.path.exists(readme_path):
        return False
    
    try:
        with open(readme_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verifica t√≠tulos duplicados
        lines = content.split('\n')
        sections = []
        duplicates_found = False
        
        for line in lines:
            if line.startswith('## '):
                section = line.strip()
                if section in sections:
                    print(f"‚ö†Ô∏è  Se√ß√£o duplicada encontrada: {section}")
                    duplicates_found = True
                sections.append(section)
        
        return duplicates_found
    
    except Exception as e:
        print_error(f"Erro ao verificar README: {e}")
        return False

# Fun√ß√µes utilit√°rias que podem ser usadas como ferramentas
def read_file(path: str) -> str:
    """L√™ o conte√∫do de um arquivo"""
    if not os.path.exists(path):
        return f"‚ö†Ô∏è Arquivo '{path}' n√£o encontrado."
    try:
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    except UnicodeDecodeError:
        with open(path, "r", encoding="latin-1", errors="replace") as f:
            return f.read()
    except Exception as e:
        return f"Erro ao ler '{path}': {e}"

def list_files(directory: str) -> str:
    """Lista todos os arquivos em um diret√≥rio"""
    try:
        items = os.listdir(directory)
        return "\n".join(items)
    except Exception as e:
        return f"Erro ao listar arquivos: {e}"

def main():
    print_header()
    
    # Configura diret√≥rios automaticamente
    project_path = setup_directories()
    
    print_step(3, 8, "Carregando configura√ß√µes...")
    load_dotenv()
    
    # Verifica API key
    if "ANTHROPIC_API_KEY" not in os.environ:
        print_error("Vari√°vel ANTHROPIC_API_KEY n√£o definida.")
        print("üí° Defina sua chave API do Claude no arquivo .env")
        print("   Exemplo: ANTHROPIC_API_KEY=sua_chave_aqui")
        return
    
    # Verifica se√ß√µes duplicadas
    print_step(4, 8, "Verificando documenta√ß√£o existente...")
    has_duplicates = check_readme_sections()
    
    # Determina vers√£o
    next_version = get_next_version()
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    print_step(5, 8, f"Preparando vers√£o {next_version}...")
    
    # Detecta o nome do projeto automaticamente
    project_name = os.path.basename(os.getcwd())
    
    print_step(6, 8, "Iniciando an√°lise com IA...")
    print("ü§ñ Conectando com Anthropic Claude...")
    
    team = Team(
        mode="coordinate",
        members=[curation_agent, doc_agent],
        model=Claude(
            id="claude-3-haiku-20240307",
            api_key=os.getenv("ANTHROPIC_API_KEY")
        ),
        tools=[read_file, list_files],
        success_criteria="Atualizar automaticamente a documenta√ß√£o t√©cnica com curadoria humana.",
        instructions=[
            "Documenta√ß√£o deve ser clara, concisa e em markdown",
            "Instru√ß√µes de instala√ß√£o devem ser precisas e bem explicadas",
            "NUNCA duplicar se√ß√µes existentes - sempre verificar antes de adicionar",
            "Se encontrar se√ß√µes duplicadas, unificar em uma √∫nica se√ß√£o",
            "Evitar repetir informa√ß√µes j√° documentadas",
            "Mantenha o README.md focado na vis√£o geral e o CHANGELOG.md nas mudan√ßas",
            "Mantenha imagens se existirem",
            "Use formata√ß√£o consistente e profissional",
        ],
        markdown=True
    )
    
    print_step(7, 8, "Executando an√°lise inteligente...")
    
    prompt = f"""
    Voc√™ √© um agente especialista que deve analisar este projeto e atualizar a documenta√ß√£o.
    
    INFORMA√á√ïES DO PROJETO:
    - Nome: {project_name}
    - Vers√£o: {next_version}
    - Data: {current_date}
    - Caminho: {project_path}
    
    VERIFICA√á√ÉO IMPORTANTE:
    {"‚ö†Ô∏è ATEN√á√ÉO: Se√ß√µes duplicadas detectadas no README! Unifique-as." if has_duplicates else "‚úÖ README sem duplica√ß√µes detectadas."}
    
    TAREFAS OBRIGAT√ìRIAS:
    
    1. AN√ÅLISE DO PROJETO:
       - Use 'list_files' para mapear a estrutura em '{project_path}'
       - Use 'read_file' para examinar arquivos importantes (main.py, requirements.txt, README.md)
       
    2. ATUALIZA√á√ÉO DO README.md:
       - Verificar se j√° existe e ler o conte√∫do atual
       - NUNCA duplicar se√ß√µes existentes
       - Se faltarem se√ß√µes importantes, adicionar apenas o que falta
       - Manter formata√ß√£o consistente
       - Focar em clareza e profissionalismo
       
    3. ATUALIZA√á√ÉO DO CHANGELOG.md:
       - Verificar se j√° existe uma entrada para vers√£o {next_version}
       - Se n√£o existir, adicionar nova entrada no formato: ## [{next_version}] - {current_date}
       - Se j√° existir, N√ÉO duplicar - apenas verificar se est√° completa
       - Descrever mudan√ßas feitas na documenta√ß√£o
       - Seguir formato Semantic Versioning (MAJOR.MINOR.PATCH)
       - Usar categorias: Adicionado, Alterado, Removido, Corrigido
    
    DIRETRIZES DE QUALIDADE:
    - Seja conciso mas informativo
    - Use portugu√™s brasileiro
    - Mantenha tom profissional
    - Evite redund√¢ncias
    - Teste mentalmente se faz sentido para um novo usu√°rio
    """
    
    try:
        team.print_response(prompt)
        print_step(8, 8, "Finalizando documenta√ß√£o...", "‚úÖ")
        
        print("\n" + "=" * 60)
        print_success("DOCUMENTA√á√ÉO GERADA COM SUCESSO!")
        print("=" * 60)
        print(f"üìÑ README.md atualizado")
        print(f"üìã CHANGELOG.md vers√£o {next_version}")
        print(f"üìÖ Data: {current_date}")
        print("=" * 60)
        
    except Exception as e:
        print_error(f"Erro durante a gera√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()