from agents.doc_agent import doc_agent
from agents.curation_agent import curation_agent
from agno.team import Team
from agno.models.anthropic import Claude
from datetime import datetime
import re
import os
from pathlib import Path

from dotenv import load_dotenv

# ========== CONFIGURA√á√ÉO DO PROJETO ==========
# Ajuste estes caminhos conforme seu projeto:

PROJECT_FOLDER = "readocs"  # Nome da pasta com o c√≥digo
ROOT_DIR = ".."             # Onde criar README/CHANGELOG (.. = pasta pai)

# Para outros projetos, mude apenas essas vari√°veis:
# PROJECT_FOLDER = "src"     # ou "app", "backend", etc.  
# ROOT_DIR = "."             # ou "../..", etc.

# =============================================

def setup_directories():
    """Configura diret√≥rios de forma inteligente"""
    current = Path.cwd()
    
    # Se j√° estamos no diret√≥rio que tem o PROJECT_FOLDER, vai para o pai
    if (current / PROJECT_FOLDER).exists():
        target_root = current
        project_path = f"./{PROJECT_FOLDER}"
    
    # Se estamos dentro do PROJECT_FOLDER, sobe um n√≠vel  
    elif current.name == PROJECT_FOLDER:
        target_root = current.parent
        project_path = f"./{PROJECT_FOLDER}"
        os.chdir(target_root)
    
    # Caso geral: usa ROOT_DIR configurado
    else:
        target_root = Path(ROOT_DIR).resolve()
        project_path = f"./{PROJECT_FOLDER}"
        os.chdir(target_root)
    
    print(f"üìÅ Diret√≥rio raiz (arquivos): {os.getcwd()}")
    print(f"üîç C√≥digo para an√°lise: {project_path}")
    
    return project_path

def get_next_version():
    """Determina a pr√≥xima vers√£o baseada no CHANGELOG existente"""
    changelog_path = "CHANGELOG.md"
    
    if not os.path.exists(changelog_path):
        return "0.1.0"
    
    try:
        with open(changelog_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        version_pattern = r'## \[(\d+)\.(\d+)\.(\d+)\]'
        versions = re.findall(version_pattern, content)
        
        if not versions:
            return "0.1.0"
        
        major, minor, patch = map(int, versions[0])
        return f"{major}.{minor}.{patch + 1}"
    
    except Exception as e:
        print(f"Erro ao ler CHANGELOG: {e}")
        return "0.1.0"

def main():
    # Configura diret√≥rios automaticamente
    project_path = setup_directories()
    
    load_dotenv()
    
    # Verifica API key
    if "ANTHROPIC_API_KEY" not in os.environ:
        print("‚ö†Ô∏è  Vari√°vel ANTHROPIC_API_KEY n√£o definida.")
        print("Defina sua chave API do Claude para usar os agentes.")
        return
    
    # Determina vers√£o
    next_version = get_next_version()
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    print(f"üè∑Ô∏è  Pr√≥xima vers√£o: {next_version}")
    
    # Detecta o nome do projeto automaticamente
    project_name = os.path.basename(os.getcwd())
    
    team = Team(
        mode="coordinate",
        members=[curation_agent, doc_agent],
        model=Claude(
            id="claude-3-haiku-20240307",
            api_key=os.getenv("ANTHROPIC_API_KEY")
        ),
        success_criteria="Atualizar automaticamente a documenta√ß√£o t√©cnica com curadoria humana.",
        instructions=[
            "Documenta√ß√£o deve ser clara, concisa e em markdown",
            "Instru√ß√µes de instala√ß√£o devem ser precisas e bem explicadas",
            "Evitar sobrescrever conte√∫do √∫til",
            "Evitar repetir informa√ß√µes j√° documentadas",
            "Se existirem t√≠tulos duplicados, junte os conte√∫dos e apague um t√≠tulo"
            "Mantenha o README.md focado na vis√£o geral e o CHANGELOG.md nas mudan√ßas",
            "Mantenha imagens se existirem",
        ],
        markdown=True
    )
    
    team.print_response(f"""
    Voc√™ √© um agente que deve analisar completamente o projeto para gerar a documenta√ß√£o.
    A documenta√ß√£o deve ser toda em portugu√™s e seguir as diretrizes do projeto.
    Primeiro, coloque o nome do projeto, que √© '{project_name}', com a primeira letra sendo a √∫nica mai√∫scula.
    Para fazer o README.md, voc√™ deve:
    1. Use a ferramenta 'list_files' para ter uma vis√£o geral da estrutura do projeto em '{project_path}'.
    2. Com base na lista de arquivos, use a ferramenta 'read_file' para analisar os arquivos relevantes, como 'main.py' e 'requirements.txt', para entender o prop√≥sito e as depend√™ncias do projeto.
    3. Atualize o README.md com uma se√ß√£o de 'Introdu√ß√£o' (baseada na sua an√°lise) e uma se√ß√£o de 'Instala√ß√£o' (com as depend√™ncias e instru√ß√µes para instalar o projeto que voc√™ encontrou).
    4. N√£o √© para citar a complexidade do projeto (N√£o √© para citar se √© simples ou complexo,etc), mas pode fazer um pequeno pitch sobre o que ele faz na Introdu√ß√£o.
    5. Se identificar uma VENV ou ambiente virtual, adicione instru√ß√µes para ativ√°-lo em sistemas operacionais Windows e Linux.
    6. Se houver imagens, mantenha-as no README.md, mas n√£o √© necess√°rio criar uma se√ß√£o de imagens, apenas mantenha as imagens que j√° existirem.

    Diretrizes para o CHANGELOG.md:
    1. Adicione uma nova entrada para a vers√£o {next_version}.
    2. O novo registro deve incluir a data de hoje ({current_date}).
    3. Descreva as mudan√ßas de forma clara e concisa, seguindo o padr√£o de formata√ß√£o do CHANGELOG.md existente.
    4. Relate aqui as mudan√ßas que voc√™ fez no README.md, como a adi√ß√£o de se√ß√µes ou melhorias na clareza.
    5. Se n√£o houver mudan√ßas significativas, adicione uma entrada gen√©rica como "Nenhuma mudan√ßa significativa".
    """)

main()