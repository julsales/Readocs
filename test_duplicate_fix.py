#!/usr/bin/env python3
"""
Script de teste para validar a corre√ß√£o autom√°tica de duplicatas
"""

import os
import sys
import tempfile
import shutil

# Adiciona o diret√≥rio readocs ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'readocs'))

from modules.readme_cleaner import fix_readme_duplicates, ensure_clean_readme

def test_duplicate_removal():
    """Testa a remo√ß√£o de se√ß√µes duplicadas"""
    
    # Cria um README de teste com duplicatas
    test_content = """# Projeto Teste

## Introdu√ß√£o
Esta √© a primeira se√ß√£o de introdu√ß√£o.

## Instala√ß√£o
Primeira se√ß√£o de instala√ß√£o.

## Introdu√ß√£o
Esta √© uma se√ß√£o duplicada de introdu√ß√£o.

## Como Usar
Se√ß√£o sobre como usar.

## Instala√ß√£o
Segunda se√ß√£o de instala√ß√£o duplicada.

## Conclus√£o
Se√ß√£o final.
"""
    
    # Cria arquivo tempor√°rio
    with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
        f.write(test_content)
        temp_path = f.name
    
    try:
        print("üß™ Testando corre√ß√£o de duplicatas...")
        print(f"üìÅ Arquivo de teste: {temp_path}")
        
        # Mostra conte√∫do original
        print("\nüìÑ ANTES da corre√ß√£o:")
        with open(temp_path, 'r') as f:
            lines = f.readlines()
            for i, line in enumerate(lines, 1):
                if line.startswith('## '):
                    print(f"  {i:2d}: {line.strip()}")
        
        # Aplica corre√ß√£o
        print("\nüîß Aplicando corre√ß√£o...")
        fixed = fix_readme_duplicates(temp_path)
        
        if fixed:
            print("‚úÖ Duplicatas encontradas e corrigidas!")
        else:
            print("‚ÑπÔ∏è  Nenhuma duplicata encontrada.")
        
        # Mostra conte√∫do ap√≥s corre√ß√£o
        print("\nüìÑ DEPOIS da corre√ß√£o:")
        with open(temp_path, 'r') as f:
            lines = f.readlines()
            for i, line in enumerate(lines, 1):
                if line.startswith('## '):
                    print(f"  {i:2d}: {line.strip()}")
        
        # Verifica se ainda h√° duplicatas
        with open(temp_path, 'r') as f:
            content = f.read()
        
        sections = []
        duplicates_found = False
        for line in content.split('\n'):
            if line.startswith('## '):
                section = line.strip()
                if section in sections:
                    print(f"‚ùå FALHA: Ainda h√° duplicata: {section}")
                    duplicates_found = True
                sections.append(section)
        
        if not duplicates_found:
            print("\nüéâ SUCESSO: Todas as duplicatas foram removidas!")
            return True
        else:
            print("\n‚ùå FALHA: Ainda existem duplicatas!")
            return False
            
    finally:
        # Remove arquivo tempor√°rio
        os.unlink(temp_path)

def test_ensure_clean():
    """Testa a fun√ß√£o ensure_clean_readme"""
    
    test_content = """# Projeto

## Se√ß√£o A
Conte√∫do A

## Se√ß√£o B
Conte√∫do B

## Se√ß√£o A
Conte√∫do A duplicado
"""
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
        f.write(test_content)
        temp_path = f.name
    
    try:
        print("\nüß™ Testando ensure_clean_readme...")
        
        # Aplica limpeza silenciosa
        ensure_clean_readme(temp_path)
        
        # Verifica resultado
        with open(temp_path, 'r') as f:
            content = f.read()
        
        sections = []
        for line in content.split('\n'):
            if line.startswith('## '):
                sections.append(line.strip())
        
        # Remove duplicatas da lista para verificar
        unique_sections = list(dict.fromkeys(sections))
        
        if len(sections) == len(unique_sections):
            print("‚úÖ ensure_clean_readme funcionou corretamente!")
            return True
        else:
            print("‚ùå ensure_clean_readme falhou!")
            return False
            
    finally:
        os.unlink(temp_path)

if __name__ == "__main__":
    print("üöÄ TESTE DE CORRE√á√ÉO AUTOM√ÅTICA DE DUPLICATAS")
    print("=" * 50)
    
    success1 = test_duplicate_removal()
    success2 = test_ensure_clean()
    
    print("\n" + "=" * 50)
    if success1 and success2:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema de corre√ß√£o autom√°tica funcionando!")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        sys.exit(1)
